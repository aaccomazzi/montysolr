<project name="montysolr" default="usage">

	<description>Java extensions for Invenio - Java search engine made python-friendly</description>


	<!--
  ==================================================================
     Configuration section
  ==================================================================
  -->


	<property name="montysolr.home" location="." />
	<property name="src.dir.java" location="src/java" />
	<property name="src.dir.python" location="src/python" />
	<property name="build.dir" location="build" />
	<property name="dist.dir" value="build/dist" />
	<property name="classes.dir" value="build/classes/java" />

	<property file="build.properties" />


	<property name="solr.home" location="${build.dir}/solr-download/apache-solr-${solr.version}"/>
	<property name="webdist.home" location="${webdist}" />
	<property name="lib.dir" value="lib" />
	<property name="app.name" value="montysolr_java" />
    <property name="app.solr.name" value="solr_java" />	
	<property name="app.version" value="${montysolr.version}" />
	<property name="jar.suffix" value="${app.name}-${app.version}.jar" />
	<property name="ddash" value="--" />

    
	<!--set default PYTHONPATH if the environemnt is empty -->
	<property environment="env" />
	<property name="env.PYTHONPATH" value="${dist.dir}${path.separator}${src.dir.python}${path.separator}"/>

	<!--
    these classes must be made available/known to JCC when we compile the wrapper
    They will be made visible to Python, but are also used for generation of the jars.
     -->
	<property name="montysolr.classes" value="
		monty.solr.jni.MontySolrBridge
		monty.solr.jni.MontySolrVM
		monty.solr.jni.PythonBridge
		monty.solr.jni.PythonMessage
		" />
	<property name="jcc.build" value="${montysolr.classes}" />
	<property name="jcc.packages" value=""/>
    
    <!--
    trunk (future 5) = http://svn.apache.org/repos/asf/lucene/dev/trunk
    4.x (future 4.1 etc) = http://svn.apache.org/repos/asf/lucene/dev/branches/branch_4x
    4.0 = http://svn.apache.org/repos/asf/lucene/dev/branches/lucene_solr_4_0
    
    29/11/12 - tracking 4.0 (before it was trunk)
    //-->
	<property name="solr.svn" value="http://svn.apache.org/repos/asf/lucene/dev/branches/lucene_solr_4_0" />	

	<!--
    _build variables are there to add extra classes to the wrapper - some packages (either in lucene or for montysolr)
    are not usable/visible, unless also these classes are present. So this is here to add these extra components to the build.
    I tried registerining packages only, but it didn't work for v2.9, so i am listing classes directly
    java.util.ArrayList
    -->
	<property name="jcc.build_also" value="
		java.lang.Float
		java.lang.System
		java.lang.String
		" />



	<import file="common-build.xml"/>
	<path id="classpath">
		<path refid="common.classpath"/>
	</path>
	<path id="test.classpath">
		<path refid="common.test.classpath"/>
	</path>
	<path id="junit.classpath">
		<path refid="common.junit.classpath"/>
	</path>



	<!--
      ==================================================================
         Initialization & maintenance
      ==================================================================
      -->

	<target name="compile-test" depends="compile,common.compile-test" />

	<target name="config" depends="init">
		<property name="montysolr.jar" value="${build.dir}/${final.name}.jar" />

	</target>

	<!-- Default target: usage.  Prints out instructions. -->
	<target name="usage"
	          description="Prints out instructions">
		<echo message="Welcome to the MontySolr project!" />
		<echo message="Use 'ant build-all' to compile MontySolr and prepare demos." />
		<echo message="Use 'ant run-example' to run the example." />

		<echo message="And for developers:"/>
		<echo message="Use 'ant clean' to clean compiled files." />
		<echo message="Use 'ant compile' to compile the Java source code." />
		<echo message="Use 'ant build' to compile only MontySolr as a Python module." />
		<echo message="Use 'ant build-solr' to compile only Solr as a Python module." />
		<echo message="TODOs:" />
		<echo message="Use 'ant automatic-install' to install everything incl dependencies." />
		<echo message="Use 'ant package' to generate zip, tgz, and maven artifacts for distribution." />
		<echo message="Use 'ant test' to run unit tests." />
	</target>




	<!-- this is needed for all targets -->
	<target name="init" depends="check_properties,die_unless_propertiesOK,check-solr-location">
		<mkdir dir="${build.dir}" />
		<mkdir dir="${dist.dir}" />
		<mkdir dir="${classes.dir}" />
		<mkdir dir="${build.dir}/jar" />

		<exec executable="${python}" failonerror="false" errorproperty="test_import_errors" >
			<arg value="-c"/>
			<arg value="import jcc; import lucene; lucene.initVM()" />
		</exec>

		<condition property="import_ok">
			<equals arg1="${test_import_errors}" arg2=""/>
		</condition>

		<fail unless="import_ok" message="${test_import_errors}${line.separator}Please install the required Python modules first (jcc, lucene)" />


		<!-- retrieves the location of the jcc and stores in inside jcc_egg -->
	    <exec executable="${python}" failonerror="true" outputproperty="jcc_egg" logerror="true">
	        <arg value="-c"/>
	        <arg value="import os, jcc; print os.path.dirname(os.path.dirname(jcc.__file__))" />
	    </exec>
	    
	</target>


	<target name="check_properties">
		<condition property="propertiesOK">
			<and>
				<isset property="python" />
				<isset property="jcc" />
				<isset property="montysolr.version" />
				<isset property="solr.version" />
				<isset property="ant" />
			</and>
		</condition>
	</target>

	<target name="die_unless_propertiesOK" unless="propertiesOK">
		<echo>The properties of the project are not set correctly. Copy "build.properties.default" -> "build.properties" and edit the new file if necessary.</echo>
		<fail />
	</target>



	<target name="clean" >
		<delete dir="${build.dir}" />
		<delete dir="${classes.dir}" />
		<mkdir dir="${classes.dir}"/>
	</target>

	<target name="default" depends="usage" />


	<!--
      ==================================================================
         Compilation section for jars
      ==================================================================
      -->

	<!-- this is needed for building targets -->
	<target name="config-build" depends="config,check-solr-location,check-lucene-jars,set-jar-paths,write-properties" >
		<property name="_properties.written" value="true" />
	</target>


	<target name="set-jar-paths">
		<!--
              The part below will discover all the paths inside the directory (for the
              given pattern) and the property with .path end element will look like
              path1 [dash][dash]jar path2 [dash][dash]jar path3....

              However, this is suboptimal for cases, when there are two versions of the
              jar file in the folder, for example:
               solr-core-1.4.1.jar
               solr-core-1.4.2-dev.jar

          We include them all. TODO: pick the newest file only
          -->
		<path id="solr.core.path">
			<fileset dir="${solr.real.location}/dist" id="solr.core.jar" >
				<filename name="*solr-core-*.jar"/>
			</fileset>
		</path>
		<pathconvert property="solr.core.jar.string" pathsep=" --jar ">
			<path refid="solr.core.path" />
		</pathconvert>

		<path id="solr.sorlj.path">
			<fileset dir="${solr.real.location}/dist" id="solr.solrj.jar" >
				<filename name="*solr-solrj-*.jar"/>
			</fileset>
		</path>
		<pathconvert property="solr.solrj.jar.string" pathsep=" --jar ">
			<path refid="solr.sorlj.path" />
		</pathconvert>

		<path id="montysolr.classpath">
			<fileset dir="${build.dir}" includes="montysolr*.jar" />
			<fileset dir="${solr.real.location}/dist" includes="**/*.jar" />
			<fileset dir="${solr.real.location}" includes="lib/**/*.jar" />
			<fileset dir="${solr.real.location}" includes="example/lib/**/*.jar" />
			<fileset dir="${solr.real.location}" includes="example/start.jar" />
			<fileset dir="${lib.dir}" includes="**/*.jar" />
		</path>
	</target>

	<!-- Compiles all java classes -->
	<target name="compile" depends="config-build">
		<compile srcdir="${src.dir.java}" destdir="${classes.dir}">
			<classpath path="${jcc_egg}/jcc/classes"/>
			<classpath refid="montysolr.classpath"/>
		</compile>
	</target>

	<target name="test" depends="write-properties">
		   <antcall target="common.test" inheritall="true" inheritrefs="true"/>
	</target>

    
	<target name="test-all" depends="test,test-contrib" description="Run tests for core and contrib"/>
    
	
	<!-- writes into a simple format various config variables, they can be used by unittests/java -->
	<target name="write-properties" depends="config">
		   <echo file="${build.dir}/build.properties">
message=Automatically generated by ant during compilation of MontySolr, do not change!
solr.home=${solr.home}
solr.real.location=${solr.real.location}
jcc=${jcc}
jcc_egg=${jcc_egg}
python=${python}
solr.version=${solr.version}    
montysolr.version=${montysolr.version}
ant=${ant}
		   </echo>
	</target>




	<!--
  ==================================================================
     Testing Python Eggs
  ==================================================================
  -->
	<target name="before-unzip">
		<delete dir="${build.dir}/${app.name}.egg-info" failonerror="no" />
		<delete dir="${build.dir}/EGG-INFO" failonerror="no" />
	</target>

	<!-- Unzip the egg into python-test to be loadable -->
	<target name="unzip-egg" depends="config-build,before-unzip">
		<delete dir="${dist.dir}/${app.name}" failonerror="yes" />
		<unzip dest="${dist.dir}" overwrite="yes">
			<fileset dir="${dist.dir}">
				<include name="${app.name}*.egg" />
			</fileset>
		</unzip>
		<move file="${dist.dir}/EGG-INFO" tofile="${dist.dir}/${app.name}.egg-info" />

		<!-- write the current classpath into a text file -->
		<echo file="${dist.dir}/${app.name}/classpath">${toString:montysolr.classpath}</echo>
	</target>



	<!-- Just a basic test to verify that our montysolr package is correctly compiled and contains the necessary classes -->
	<target name="test-egg" depends="config-build">
		<exec executable="${python}" dir="${dist.dir}" failonerror="true" logerror="true">
			<arg value="-c" />
			<arg value="import ${app.name} as X;X.initVM(X.CLASSPATH+'${path.separator}${toString:montysolr.classpath}',vmargs='-Dsolr.solr.home=/x/dev/workspace/test-solr/solr,-Dsolr.data.dir=/x/dev/workspace/test-solr/solr/data');assert (X.__file__ == 'montysolr/__init__.pyc')" />
		</exec>
	</target>



	<!--
	==================================================================
     Embedding PythonVM in JavaVM
    ==================================================================
    -->

	<!-- build solr for python -->
	<target name="build-solr" depends="config-build,compile-solr-egg,unzip-solr-egg"
	               description="Build separately the Python egg of Solr"/>
    <target name="compile-solr-egg" depends="config-build">
        <mkdir dir="${build.dir}" />
        <delete dir="${build.dir}/build" failonerror="no" />

        <echo message="You can watch Monty Python, this takes a while..." />

        <exec executable="${python}" dir="${build.dir}" failonerror="true" logerror="true">
            <env key="PYTHONPATH" value="${src.dir.python}${path.separator}${env.PYTHONPATH}" />

            <!-- this is mac specific, i will yet have to find out how to make it os-specific,
                 but it makes no problems to Ubuntu/SLC linux os'es so far -->
            <env key="JCC_LFLAGS" value="-framework${path.separator}JavaVM${path.separator}-framework${path.separator}Python" />


            <arg line="${jcc}" />
            <arg value="${ddash}shared" />
        	<arg value="${ddash}use_full_names" />
            <arg value="${ddash}version" />
            <arg value="${app.version}" />
            <arg value="${ddash}import"/>
            <arg value="lucene" />
            <arg line="${ddash}jar ${solr.core.jar.string}" />
            <arg line="${ddash}jar ${solr.solrj.jar.string}" />
            <arg value="${ddash}classpath" />
            <arg value="${toString:montysolr.classpath}${path.separator}${jcc_egg}/jcc/classes/" />
            <arg value="${ddash}package" />
            <arg value="java.lang" />
            <arg value="${ddash}python" />
            <arg value="${app.solr.name}" />
            <arg value="${ddash}build" />
            <arg value="${ddash}bdist" />
            <arg line="${ddash}files 5" />
            <!-- We exclude the embedded classes because they are Jetty specific -->
            <arg line="${ddash}exclude org.apache.solr.search.FunctionQParser
                       ${ddash}exclude org.apache.solr.client.solrj.embedded.NoLog 
                       ${ddash}exclude org.apache.solr.client.solrj.embedded.JettySolrRunner
                       ${ddash}exclude org.apache.solr.update.processor.UniqFieldsUpdateProcessorFactory
                       ${ddash}exclude org.apache.noggit.JSONParser
                       ${ddash}exclude org.apache.solr.util.xslt.TransformerProvider
                       ${ddash}rename org.apache.solr.handler.loader.ContentStreamLoader=LoaderContentStreamLoader
                      " />
        </exec>
    </target>
	
	
	<!-- Build MontySolr for Python -->
	<target name="build" depends="config-build,compile-montysolr-egg,unzip-egg"
		   description="Build MontySolr separately"/>

	
	<target name="compile-montysolr-egg" depends="compile,jar">
		<mkdir dir="${build.dir}" />
		<delete dir="${build.dir}/build" failonerror="no" />

		<exec executable="${python}" dir="${build.dir}" failonerror="true" logerror="true">
			<env key="PYTHONPATH" value="${src.dir.python}${path.separator}../${dist.dir}${path.separator}${env.PYTHONPATH}" />

			<!-- this is mac specific, i will yet have to find out how to make it os-specific -->
			<env key="JCC_LFLAGS" value="-framework${path.separator}JavaVM${path.separator}-framework${path.separator}Python" />

			<arg line="${jcc}" />
			<arg value="${ddash}shared" />
			<arg value="${ddash}use_full_names" />
			<arg value="${ddash}version" />
			<arg value="${app.version}" />
			<arg line="${jcc.build}" />
			<arg line="${jcc.build_also}" />
			<arg value="${ddash}import"/>
			<arg value="lucene" />
			<arg value="${ddash}import" />
			<arg value="${app.solr.name}" />

			<arg line="${jcc.packages}" />
			<arg value="${ddash}package" />
			<arg line="org.apache.solr.request" />
			<arg value="${ddash}classpath" />
			<arg value="${toString:montysolr.classpath}${path.separator}../${montysolr.jar}:${path.separator}${jcc_egg}/jcc/classes/" />
			<arg value="${ddash}include" />
			<arg value="${montysolr.jar}" />
			<arg value="${ddash}python" />
			<arg value="${app.name}" />
			<arg value="${ddash}build" />
			<arg value="${ddash}bdist" />

			<!-- this can be activated if i want to distribute python together with the jcc, python code
                 will be copied into the extension folder
            <arg value="${ddash}module" />
            <arg value="${src.dir.python}" />
            -->
		</exec>
	</target>


    <!--
    ==================================================================
     Commands for a lazy developer
    ==================================================================
    -->
	
	<target name="build-all" depends="get-solr,build-solr,build,jar,build-contrib"
	        description="Build Python egg for Solr, and sorlpie egg to be embedded inside Java VM, this is what you need to run Invenio inside Solr"/>
	    
    
    <target name="build-contrib" >
      
      <exec executable="${ant}" failifexecutionfails="true" failonerror="true" >
        <arg line="build-all -f ${common.dir}/contrib/antlrqueryparser/build.xml"/>
      </exec>
      <exec executable="${ant}" failifexecutionfails="true" failonerror="true" >
        <arg line="build-all -f ${common.dir}/contrib/invenio/build.xml"/>
      </exec>
      <exec executable="${ant}" failifexecutionfails="true" failonerror="true" >
        <arg line="build-all -f ${common.dir}/contrib/newseman/build.xml"/>
      </exec>
      <exec executable="${ant}" failifexecutionfails="true" failonerror="true" >
        <arg line="build-all -f ${common.dir}/contrib/adsabs/build.xml"/>
      </exec>
      <exec executable="${ant}" failifexecutionfails="true" failonerror="true" >
        <arg line="build-all -f ${common.dir}/contrib/examples/build.xml"/>
      </exec>

      <!--
           seems that ant 1.8.x gets the order differently, huh... so we must make sure
           antlrqueryparser is built before the rest, so i can't use apply
           
      <apply executable="${ant}" parallel="false" failonerror="true" failifexecutionfails="true">
        <arg line="build-all"/>
        <arg value="-f"/>
        <fileset dir="${common.dir}/contrib">
          <include name="**/invenio/build.xml"/>
          <include name="**/newseman/build.xml"/>
          <include name="**/adsabs/build.xml"/>
          <include name="**/examples/build.xml"/>
        </fileset>
      </apply>
      -->
      
    </target>
	
	<target name="test-contrib" >
        <apply executable="${ant}" parallel="false" failonerror="true" >
          <arg line="test"/>
          <arg value="-f"/>
          <fileset dir="${common.dir}/contrib">
            <include name="**/antlrqueryparser/build.xml"/>
            <include name="**/invenio/build.xml"/>
            <include name="**/newseman/build.xml"/>
          </fileset>
        </apply>
	  
  	  <apply executable="${ant}" parallel="false" failonerror="true" >
        <arg line="test"/>
        <arg value="-f"/>
  	    <arg line="-Dtests.file.encoding=UTF-8" />
        <fileset dir="${common.dir}/contrib">
          <include name="**/adsabs/build.xml"/>
        </fileset>
      </apply>
	      
    </target>

	



	<!--
    ====================================================================
                   Installation goodies
    ====================================================================
    -->
    
	
	<target name="get-solr"
          depends="get-solr-usign-svn,check-solr-location,download-solr,build-solr-example">
	</target>

	
	
	<!-- this is for development purposes - especially when lucene/solr stable releases are not yet there -->
	<target name="get-solr-usign-svn">
		<mkdir dir="${solr.home}"/>
		
		<exec executable="${python}" failifexecutionfails="true" dir="${solr.home}">
			<arg value="-c"/>
			<arg value="import os;'${solr.version}'.lower().__contains__('svn') and (os.path.isdir('.svn') and os.system('svn update --force') or os.system('svn checkout ${solr.svn} .'))"/>
		</exec>
		
		<antcall target="check-solr-location" />
	</target>

	<!-- this target sets the location of the solr, if not present, we'll assume build/solr-download/apache-solr-${solr.version}/solr
	   The property may also be set by a download-solr task
	 -->
	<target name="check-solr-location" >
		<condition property="solr.real.location" value="${solr.home}">
			<and>
				<available file="${solr.home}/example/README.txt"/>
				<available file="${solr.home}/contrib/contrib-build.xml"/>
			</and>
		</condition>
		
		<condition property="solr.real.location" value="${solr.home}/solr">
            <and>
                <available file="${solr.home}/solr/example/README.txt"/>
                <available file="${solr.home}/solr/contrib/contrib-build.xml"/>
            </and>
        </condition>

		<condition property="solr.real.location" value="${build.dir}/solr-download/apache-solr-${solr.version}/solr">
			<and>
				<available file="${build.dir}/solr-download/apache-solr-${solr.version}/solr/example/README.txt"/>
				<available file="${build.dir}/solr-download/apache-solr-${solr.version}/solr/contrib/contrib-build.xml"/>
			</and>
		</condition>

		<echo message="Did we find solr location? Path=${solr.real.location}"/>
	</target>


	<!-- Download the solr binary distribution, unless it was already downloaded (if solr.real.location is
         set, then we know solr was already downloaded/exists) -->
	<target name="download-solr"
		unless="solr.real.location" depends="get-solr-mirror">


		<!-- can't rely on the init target -->
		<mkdir dir="${build.dir}/solr-download/"/>

		<echo>Downloading Solr, please wait... (but if it takes too long, then run me again and I'll use a different mirror)</echo>

		<get src="${solr.mirror}/${solr.version}/apache-solr-${solr.version}-src.tgz" dest="${build.dir}/solr-download/${solr.version}-src.tgz" 
			verbose="true" ignoreerrors="true"/>
		
		<condition property="_download.using.apache.mirror" value="true">
            <not>
                <available file="${build.dir}/solr-download/${solr.version}-src.tgz"/>
            </not>
        </condition>
        
        <antcall target="download-using-apache-mirror" />
		
	    <antcall target="untar-solr" />
		
		<!-- set the property, it may be used by other targets (see check-solr-location target) -->
		<property name="solr.real.location" value="${build.dir}/solr-download/apache-solr-${solr.version}/solr"/>
	</target>
	
	
	<target name="download-using-apache-mirror" if="_download.using.apache.mirror">
            <echo>This is used only when the download using mirror site fails</echo>
            <get src="http://archive.apache.org/dist/lucene/solr/${solr.version}/apache-solr-${solr.version}-src.tgz" dest="${build.dir}/solr-download/${solr.version}-src.tgz" 
                        verbose="true" ignoreerrors="false"/>
            
    </target>

	<target name="untar-solr" >
		<untar dest="${build.dir}/solr-download" src="${build.dir}/solr-download/${solr.version}-src.tgz" compression="gzip"/>
	</target>

	<target name="build-solr-example" depends="check-solr-location">
		<echo>Building the Solr example</echo>

		<!--
        Unfortunately, the ant task is having some problems with the basedir (ant 1.7)
        <ant target="example"
            dir="${build.dir}/solr-download/apache-solr-${solr.version}/"
            inheritall="false"
        />
        -->

		<exec executable="${ant}" dir="${solr.real.location}" logerror="true">
			<env key="PATH" value="${ant.home}/bin${path.separator}${env.PATH}" />
			<arg value="example" />
		</exec>
	</target>


	
	
    <target name="unzip-solr-egg">
        <!-- retrieves the location of the jcc -->
        <exec executable="${python}" failonerror="true" outputproperty="_tmp_solr_err" dir="${build.dir}/dist" logerror="true">
            <arg value="-c"/>
            <arg value="import os,glob; print os.path.abspath(glob.glob('./${app.solr.name}*.egg')[0])" />
        </exec>

        <delete dir="${dist.dir}/${app.solr.name}.egg-info" failonerror="no" />
        <delete dir="${dist.dir}/${app.solr.name}" failonerror="no" />

        <unzip dest="${dist.dir}" overwrite="yes">
            <fileset dir="${dist.dir}">
                <include name="${app.solr.name}*.egg" />
            </fileset>
        </unzip>
        <move file="${dist.dir}/EGG-INFO" tofile="${dist.dir}/${app.solr.name}.egg-info" />
    </target>

	
	<target name="try-lucene-jars" depends="check-solr-location" >
		<!-- since on old ant we cannot ignore it -->
		<mkdir dir="${solr.real.location}/dist" />

		<path id="montysolr.classpath.testing">
			<fileset dir="${solr.real.location}/dist" includes="**/*.jar" />
		</path>

		<condition property="lucene.jars.exist" value="true">
			<and>
				<available classname="org.apache.lucene.spatial.tier.InvalidGeoException" classpath="${toString:montysolr.classpath.testing}" />
			</and>
		</condition>

		<echo message="Are lucene jars available? ${lucene.jars.exist}" level="verbose" />
	</target>

	<target name="check-lucene-jars" depends="try-lucene-jars" unless="lucene.jars.exist">
		<delete dir="${solr.real.location}/dist/montysolr-extracted" />
		<mkdir dir="${solr.real.location}/dist/montysolr-extracted" />
		<unzip dest="${solr.real.location}/dist/montysolr-extracted" overwrite="yes">
			<fileset dir="${solr.real.location}/dist">
				<include name="apache-solr*.war" />
			</fileset>
		</unzip>
		<move todir="${solr.real.location}/dist/montysolr-extracted">
			<fileset dir="${solr.real.location}/dist/montysolr-extracted/WEB-INF/lib">
				<include name="**/**.jar"/>
			</fileset>
		</move>
		<delete dir="${solr.real.location}/dist/montysolr-extracted" includeemptydirs="true">
			<exclude name="**/**.jar"/>
		</delete>
	</target>


	<target name="run-example"
	   description="Assembles Invenio example and starts MontySolr (don't forget to do build-all first)"
	   depends="">

		<exec executable="${ant}" dir="${common.dir}/contrib/examples" logerror="true" 
			newenvironment="true">
            <arg line="build-one run-configured -Dename=invenio -Dprofile=normal.profile" />
        </exec>

	</target>

	
	<target name="get-solr-mirror" depends="init" unless="solr.real.location">
		<exec executable="${python}" outputproperty="solr.mirror" failonerror="true" logerror="true">
			<arg value="-c" />
			<arg  value="import urllib;t = urllib.urlopen('http://www.apache.org/dyn/closer.cgi/lucene/solr/').read();l = filter(lambda x: 'lucene/solr' in x, map(lambda x: x.split('&quot;')[0], filter(lambda x: x[:4] == 'http', t.split('href=&quot;'))));print l[0]"/>
		</exec>
		<echo>We will use the mirror: ${solr.mirror}</echo>
	</target>

	
	<target name="install-eclipse-project-files" depends="init" >

		<property name="_home" location="." />

		<exec executable="${python}" failonerror="true" outputproperty="_top_folder" logerror="true">
			<arg value="-c"/>
			<arg value="import os;print os.path.basename(os.path.abspath('.'))" />
		</exec>

		<exec executable="${python}" failonerror="true" outputproperty="_python_ver" logerror="true">
			<arg value="-c"/>
			<arg value="import sys;print '%s.%s' % sys.version_info[:2]" />
		</exec>

		<echo file=".project">
			<![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
			<projectDescription>
				<name>]]></echo>
				<echo file=".project" append="true">${_top_folder}</echo>
				<echo file=".project" append="true">
					<![CDATA[</name>
					<comment>
					</comment>
					<projects>
						<project>lucene_solr_3_1</project>
					</projects>
					<buildSpec>
						<buildCommand>
							<name>org.python.pydev.PyDevBuilder</name>
							<arguments>
							</arguments>
						</buildCommand>
						<buildCommand>
							<name>org.eclipse.jdt.core.javabuilder</name>
							<arguments>
							</arguments>
						</buildCommand>
					</buildSpec>
					<natures>
						<nature>org.eclipse.jdt.core.javanature</nature>
						<nature>org.python.pydev.pythonNature</nature>
					</natures>
				</projectDescription>
		   ]]> </echo>

			<echo file=".pydevproject">
&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;?eclipse-pydev version="1.0"?&gt;

&lt;pydev_project&gt;
    &lt;pydev_property name="org.python.pydev.PYTHON_PROJECT_INTERPRETER"&gt;Default&lt;/pydev_property&gt;
    &lt;pydev_property name="org.python.pydev.PYTHON_PROJECT_VERSION"&gt;python ${_python_ver}&lt;/pydev_property&gt;
    &lt;pydev_pathproperty name="org.python.pydev.PROJECT_SOURCE_PATH"&gt;
    &lt;path&gt;/${_top_folder}/src/python&lt;/path&gt;
    &lt;/pydev_pathproperty&gt;
    &lt;pydev_pathproperty name="org.python.pydev.PROJECT_EXTERNAL_SOURCE_PATH"&gt;
    &lt;path&gt;${_home}/build/dist&lt;/path&gt;
    &lt;/pydev_pathproperty&gt;
&lt;/pydev_project&gt;
	   </echo>

			<echo file=".classpath">
				<![CDATA[
              <?xml version="1.0" encoding="UTF-8"?>
				<classpath>
					<classpathentry kind="src" path="src/java"/>
					<classpathentry kind="src" path="test/java"/>
					<classpathentry kind="lib" path="lib/junit-3.8.2.jar"/>
					<classpathentry kind="lib" path="lib/jzlib-1.0.7.jar"/>
					<classpathentry kind="lib" path="lib/commons-io-1.4.jar"/>
					<classpathentry kind="lib" path="lib/slf4j-api-1.5.5.jar"/>
					<classpathentry kind="lib" path="lib/slf4j-jdk14-1.5.5.jar"/>
					<classpathentry kind="lib" path="]]></echo>
	    <echo file=".classpath" append="true">${jcc_egg}/jcc/classes</echo>
		<echo file=".classpath" append="true"><![CDATA["/>
					<classpathentry combineaccessrules="false" kind="src" path="/lucene_solr_3_1"/>
					<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>
					<classpathentry combineaccessrules="false" kind="src" path="/jetty-6.1.4"/>
					<classpathentry kind="output" path="bin"/>
				</classpath>
            ]]> </echo>


	</target>


	
	<!-- poorman's way to run the python tests from inside ./src/python -->
	<target name="test-python">
	   <run-python-unittests python="${python}" python-path="${env.PYTHONPATH}${path.separator}${dist.dir}${path.separator}${src.dir.python}"
	    srcdir="${common.dir}/src/python"
	   />
	</target>
	
	</project>
