<?xml version="1.0"?>
<project name="montysolr" default="usage">

	<description>Java extensions for Python - Java search engine made python-friendly</description>


	<!--
  ==================================================================
     Configuration section
  ==================================================================
  -->


	<property name="montysolr.home" location="." />
	<property name="src.dir.java" location="src/java" />
	<property name="build.dir" location="build" />
	<property name="dist.dir" value="build/dist" />
	<property name="classes.dir" value="build/classes/java" />

	<property file="build.properties" />

	<property name="solr.home" location="${build.dir}/solr-download/apache-solr-${solr.version}"/>
	<property name="webdist.home" location="${webdist}" />
	<property name="lib.dir" value="lib" />
	<property name="app.name" value="montysolr_java" />
  <property name="app.solr.name" value="solr_java" />	
	<property name="app.version" value="${solr.version}.${montysolr.version}" />
	<property name="jar.suffix" value="${app.name}-${app.version}.jar" />
	<property name="ddash" value="--" />

    
	<!--
    trunk (future 5) = http://svn.apache.org/repos/asf/lucene/dev/trunk
    4.x (future 4.1 etc) = http://svn.apache.org/repos/asf/lucene/dev/branches/branch_4x
    4.0 = http://svn.apache.org/repos/asf/lucene/dev/branches/lucene_solr_4_0
    4.8 = http://svn.apache.org/repos/asf/lucene/dev/branches/lucene_solr_4_8
    
    29/11/12 - tracking 4.0 (before it was trunk)
    //-->
	<property name="solr.svn" value="http://svn.apache.org/repos/asf/lucene/dev/branches/lucene_solr_4_8" />


	<import file="common-build.xml"/>
	<path id="classpath">
		<path refid="common.classpath"/>
	</path>
	<path id="test.classpath">
		<path refid="common.test.classpath"/>
	</path>
	<path id="junit.classpath">
		<path refid="common.junit.classpath"/>
	</path>



	<!--
      ==================================================================
         Initialization & maintenance
      ==================================================================
      -->

	<target name="compile-test" depends="compile,common.compile-test" />

	<target name="config" depends="init">
		<property name="montysolr.jar" value="${build.dir}/${final.name}.jar" />
	</target>

	<!-- Default target: usage.  Prints out instructions. -->
	<target name="usage"
	          description="Prints out instructions">
		<echo message="Welcome to the MontySolr project!" />
		<echo message="Use 'ant build-all' to compile MontySolr and all its modules" />
		<echo message="Use 'ant build-example' to prepare standalone distribution." />

		<echo message="And for developers:"/>
		<echo message="Use 'ant clean' to clean compiled files." />
		<echo message="Use 'ant compile' to compile the Java source code." />
		<echo message="Use 'ant test-all' to run unit tests." />
	</target>




	<!-- this is needed for all targets -->
	<target name="init" depends="check_properties,die_unless_propertiesOK,check-solr-location">
		<mkdir dir="${build.dir}" />
		<mkdir dir="${dist.dir}" />
		<mkdir dir="${classes.dir}" />
		<mkdir dir="${build.dir}/jar" />

	</target>


	<target name="check_properties">
		<condition property="propertiesOK">
			<and>
				<isset property="montysolr.version" />
				<isset property="solr.version" />
			</and>
		</condition>
	</target>

	<target name="die_unless_propertiesOK" unless="propertiesOK">
		<echo>The properties of the project are not set correctly. Copy "build.properties.default" -> "build.properties" and edit the new file if necessary.</echo>
		<fail />
	</target>



	<target name="clean" >
		<delete dir="${build.dir}" />
		<delete dir="${classes.dir}" />
		<mkdir dir="${classes.dir}"/>
	</target>

	<target name="default" depends="usage" />


	<!--
      ==================================================================
         Compilation section for jars
      ==================================================================
      -->

	<!-- this is needed for building targets -->
	<target name="config-build" depends="config,check-solr-location,write-properties" >
		<property name="_properties.written" value="true" />
	</target>



	<target name="test" depends="write-properties" description="Run tests for core and contrib">
    <antcall target="common.test" inheritall="true" inheritrefs="true"/>
    <antcall target="test-contrib" inheritall="true" inheritrefs="true"/>
  </target>

    
  <!-- obsolete: redirecting to test -->
  <target name="test-all" depends="test" />
    
	
	<!-- writes into a simple format various config variables, they can be used by unittests/java -->
	<target name="write-properties" depends="config">
		   <echo file="${build.dir}/build.properties">
message=Automatically generated by ant during compilation of MontySolr, do not change!
solr.home=${solr.home}
solr.real.location=${solr.real.location}
lucene.real.location=${lucene.real.location}    
montysolr.version=${montysolr.version}
solr.version=${solr.version}		   	
		   </echo>
		
		<!-- necessary only on windows (git bash) -->
		<replaceregexp file="${build.dir}/build.properties"
		               match="\\"
		               replace="/"
			             flags="g"
		/>
	</target>





	
	
	



    <!--
    ==================================================================
     Commands for a lazy developer
    ==================================================================
    -->
	
	<target name="build" description="Builds main MontySOLR" depends="get-solr,write-properties,jar" />
	
	<target name="build-all" depends="build,build-contrib"
	        description="Build all modules"/>
	    
    
    <target name="build-contrib" >
      <sequential>
      	<ant target="build-all"  antfile="build.xml" dir="${common.dir}/contrib/antlrqueryparser"  inheritall="false" />
      	<ant target="build-all"  antfile="build.xml" dir="${common.dir}/contrib/adsabs"  inheritall="false" />
    		<ant target="build-all"  antfile="build.xml" dir="${common.dir}/contrib/examples"  inheritall="false" />
    	</sequential>
    	<!--
      <exec executable="${ant}" failifexecutionfails="true" failonerror="true" >
        <arg line="build-all -f ${common.dir}/contrib/antlrqueryparser/build.xml"/>
      </exec>
      <exec executable="${ant}" failifexecutionfails="true" failonerror="true" >
        <arg line="build-all -f ${common.dir}/contrib/newseman/build.xml"/>
      </exec>
      <exec executable="${ant}" failifexecutionfails="true" failonerror="true" >
        <arg line="build-all -f ${common.dir}/contrib/adsabs/build.xml"/>
      </exec>
      <exec executable="${ant}" failifexecutionfails="true" failonerror="true" >
        <arg line="build-all -f ${common.dir}/contrib/examples/build.xml"/>
      </exec>
      -->
  
      <!--
           seems that ant 1.8.x gets the order differently, huh... so we must make sure
           antlrqueryparser is built before the rest, so i can't use apply
           
      <apply executable="${ant}" parallel="false" failonerror="true" failifexecutionfails="true">
        <arg line="build-all"/>
        <arg value="-f"/>
        <fileset dir="${common.dir}/contrib">
          <include name="**/newseman/build.xml"/>
          <include name="**/adsabs/build.xml"/>
          <include name="**/examples/build.xml"/>
        </fileset>
      </apply>
      -->
      
    </target>
	
	<target name="test-contrib" >
		
		<ant target="test"  dir="${common.dir}/contrib/antlrqueryparser"  inheritall="false" />
    <ant target="test"  dir="${common.dir}/contrib/adsabs"  inheritall="false" />
    <ant target="test"  dir="${common.dir}/contrib/examples"  inheritall="false" />
		
		<!--
        <apply executable="${ant}" parallel="false" failonerror="true" >
          <arg line="test"/>
          <arg value="-f"/>
          <fileset dir="${common.dir}/contrib">
            <include name="**/antlrqueryparser/build.xml"/>
          </fileset>
        </apply>
	  
  	  <apply executable="${ant}" parallel="false" failonerror="true" >
        <arg line="test"/>
        <arg value="-f"/>
  	    <arg line="-Dtests.file.encoding=UTF-8" />
        <fileset dir="${common.dir}/contrib">
          <include name="**/adsabs/build.xml"/>
        </fileset>
      </apply>
	   -->
		
    </target>

	



	<!--
    ====================================================================
                   Installation goodies
    ====================================================================
    -->
    
	
	<target name="get-solr"
    depends="get-solr-usign-svn,check-solr-location,download-solr,build-solr-example,extract-solr-jars">
	</target>

	
	
	<!-- this is for development purposes - especially when lucene/solr stable releases are not yet there -->
	<target name="get-solr-usign-svn">
		<mkdir dir="${solr.home}"/>
		
		<!--
		<exec executable="svn" failonerror="true" failifexecutionfails="true" dir="${solr.home}">
      <arg line="update" />
    </exec>
		
		<exec executable="svn" failonerror="true" failifexecutionfails="true" dir="${solr.home}">
      <arg value="checkout" />
			<arg value="${solr.svn}" />
    </exec>
		-->
	  
		<exec executable="python" failifexecutionfails="true" dir="${solr.home}">
			<arg value="-c"/>
			<arg value="import os;'${solr.svn}'.__contains__('svn') and (os.path.isdir('.svn') and os.system('svn update - -force') or os.system('svn checkout ${solr.svn} .'))"/>
		</exec>
		
		<antcall target="check-solr-location" />
	</target>

	<!-- this target sets the location of the solr, if not present, we'll assume build/solr-download/apache-solr-${solr.version}/solr
	   The property may also be set by a download-solr task
	 -->
	<target name="check-solr-location" >
		<condition property="solr.real.location" value="${solr.home}">
			<and>
				<available file="${solr.home}/example/README.txt"/>
				<available file="${solr.home}/contrib/contrib-build.xml"/>
			</and>
		</condition>
		
		<condition property="solr.real.location" value="${solr.home}/solr">
        <and>
            <available file="${solr.home}/solr/example/README.txt"/>
            <available file="${solr.home}/solr/contrib/contrib-build.xml"/>
        </and>
    </condition>

		<condition property="solr.real.location" value="${build.dir}/solr-download/apache-solr-${solr.version}/solr">
			<and>
				<available file="${build.dir}/solr-download/apache-solr-${solr.version}/solr/example/README.txt"/>
				<available file="${build.dir}/solr-download/apache-solr-${solr.version}/solr/contrib/contrib-build.xml"/>
			</and>
		</condition>

		<echo message="Did we find solr location? Path=${solr.real.location}"/>
		
		<property name="lucene.real.location" location="${solr.real.location}/../lucene" />
	</target>


	<!-- Download the solr binary distribution, unless it was already downloaded (if solr.real.location is
         set, then we know solr was already downloaded/exists) -->
	<target name="download-solr"
		unless="solr.real.location" depends="get-solr-mirror">


		<!-- can't rely on the init target -->
		<mkdir dir="${build.dir}/solr-download/"/>

		<echo>Downloading Solr, please wait... (but if it takes too long, then run me again and I'll use a different mirror)</echo>

		<get src="${solr.mirror}/${solr.version}/apache-solr-${solr.version}-src.tgz" dest="${build.dir}/solr-download/${solr.version}-src.tgz" 
			verbose="true" ignoreerrors="true"/>
		
		<condition property="_download.using.apache.mirror" value="true">
            <not>
                <available file="${build.dir}/solr-download/${solr.version}-src.tgz"/>
            </not>
        </condition>
        
        <antcall target="download-using-apache-mirror" />
		
	    <antcall target="untar-solr" />
		
		<!-- set the property, it may be used by other targets (see check-solr-location target) -->
		<property name="solr.real.location" value="${build.dir}/solr-download/apache-solr-${solr.version}/solr"/>
	</target>
	
	
	<target name="download-using-apache-mirror" if="_download.using.apache.mirror">
            <echo>This is used only when the download using mirror site fails</echo>
            <get src="http://archive.apache.org/dist/lucene/solr/${solr.version}/apache-solr-${solr.version}-src.tgz" dest="${build.dir}/solr-download/${solr.version}-src.tgz" 
                        verbose="true" ignoreerrors="false"/>
            
    </target>

	<target name="untar-solr" >
		<untar dest="${build.dir}/solr-download" src="${build.dir}/solr-download/${solr.version}-src.tgz" compression="gzip"/>
	</target>

	<target name="build-solr-example" depends="check-solr-location,build-montysolr-dependencies">
		<echo>Building the Solr example</echo>

      <!--
          Ant used to have some problems with the basedir (ant 1.7)
          <exec executable="${ant}" dir="${solr.real.location}" logerror="true">
            <env key="PATH" value="${ant.home}/bin${path.separator}${env.PATH}" />
            <arg value="example" />
          </exec>
      -->
      <ant target="example"	dir="${solr.real.location}"  inheritall="false" />
	</target>
	
	<target name="build-montysolr-dependencies">
		<ant target="build-modules" dir="${lucene.real.location}"  inheritall="false" />
		<ant target="dist-contrib" dir="${solr.real.location}"  inheritall="false" />
		<ant target="dist-test-framework" dir="${solr.real.location}"  inheritall="false" />
	</target>
	
	<target name="check-solr-jars-exist" depends="check-solr-location" >
    <!-- since on old ant we cannot ignore it -->
    <mkdir dir="${solr.real.location}/dist" />
		<mkdir dir="${build.dir}/solrjars-extracted" />

    <path id="montysolr.classpath.testing">
      <fileset dir="${build.dir}/solrjars-extracted" includes="**/*.jar" />
    </path>

    <condition property="solr.jars.exist" value="true">
      <and>
        <available classname="org.apache.lucene.spatial.tier.InvalidGeoException" classpath="${toString:montysolr.classpath.testing}" />
      </and>
    </condition>

    <echo message="Are lucene jars available? ${solr.jars.exist}" level="verbose" />
  </target>

	<target name="extract-solr-jars" depends="check-solr-jars-exist" unless="solr.jars.exist">
    <delete dir="${build.dir}/solrjars-extracted" />
    <mkdir dir="${build.dir}/solrjars-extracted" />
    <unzip dest="${build.dir}/solrjars-extracted" overwrite="yes">
      <fileset dir="${solr.real.location}/dist">
        <include name="*solr*.war" />
      </fileset>
    </unzip>
    <move todir="${build.dir}/solrjars-extracted">
      <fileset dir="${build.dir}/solrjars-extracted/WEB-INF/lib">
        <include name="**/**.jar"/>
      </fileset>
    </move>
    <delete dir="${build.dir}/solrjars-extracted" includeemptydirs="true">
      <exclude name="**/**.jar"/>
    </delete>
		
		<copy todir="${build.dir}/solrjars-extracted">
      <fileset dir="${solr.real.location}/dist">
        <include name="**/**.jar"/>
      </fileset>
    </copy>
		
		<copy todir="${build.dir}/solrjars-extracted" flatten="true">
      <fileset dir="${lucene.real.location}/build">
        <include name="**/**.jar"/>
      </fileset>
    </copy>
		
		<!-- this is required for running tests (that load jetty) -->
		<copy todir="${build.dir}/solrjars-extracted/example-lib" flatten="false">
      <fileset dir="${solr.real.location}/example/lib">
        <include name="**/**.jar"/>
      </fileset>
    </copy>
		
  </target>


	
	
	<target name="build-distribution"
	   description="Assembles ADSABS example and starts MontySolr (don't forget to do build-all first)"
	   depends="">

		<exec executable="ant" dir="${common.dir}/contrib/examples" logerror="true"	newenvironment="true">
      <arg line="build-one -Dename=adsabs -Dprofile=normal.profile" />
    </exec>

	</target>

	
	<target name="get-solr-mirror" depends="init" unless="solr.real.location">
		<exec executable="python" outputproperty="solr.mirror" failonerror="true" logerror="true">
			<arg value="-c" />
			<arg  value="import urllib;t = urllib.urlopen('http://www.apache.org/dyn/closer.cgi/lucene/solr/').read();l = filter(lambda x: 'lucene/solr' in x, map(lambda x: x.split('&quot;')[0], filter(lambda x: x[:4] == 'http', t.split('href=&quot;'))));print l[0]"/>
		</exec>
		<echo>We will use the mirror: ${solr.mirror}</echo>
	</target>

	
	<target name="install-eclipse-project-files" depends="init" >

		<property name="_home" location="." />

		<exec executable="${python}" failonerror="true" outputproperty="_top_folder" logerror="true">
			<arg value="-c"/>
			<arg value="import os;print os.path.basename(os.path.abspath('.'))" />
		</exec>

		<exec executable="${python}" failonerror="true" outputproperty="_python_ver" logerror="true">
			<arg value="-c"/>
			<arg value="import sys;print '%s.%s' % sys.version_info[:2]" />
		</exec>

		<echo file=".project">
			<![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
			<projectDescription>
				<name>]]></echo>
				<echo file=".project" append="true">${_top_folder}</echo>
				<echo file=".project" append="true">
					<![CDATA[</name>
					<comment>
					</comment>
					<projects>
						<project>lucene_solr_3_1</project>
					</projects>
					<buildSpec>
						<buildCommand>
							<name>org.python.pydev.PyDevBuilder</name>
							<arguments>
							</arguments>
						</buildCommand>
						<buildCommand>
							<name>org.eclipse.jdt.core.javabuilder</name>
							<arguments>
							</arguments>
						</buildCommand>
					</buildSpec>
					<natures>
						<nature>org.eclipse.jdt.core.javanature</nature>
						<nature>org.python.pydev.pythonNature</nature>
					</natures>
				</projectDescription>
		   ]]> </echo>

			<echo file=".pydevproject">
&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;?eclipse-pydev version="1.0"?&gt;

&lt;pydev_project&gt;
    &lt;pydev_property name="org.python.pydev.PYTHON_PROJECT_INTERPRETER"&gt;Default&lt;/pydev_property&gt;
    &lt;pydev_property name="org.python.pydev.PYTHON_PROJECT_VERSION"&gt;python ${_python_ver}&lt;/pydev_property&gt;
    &lt;pydev_pathproperty name="org.python.pydev.PROJECT_SOURCE_PATH"&gt;
    &lt;path&gt;/${_top_folder}/src/python&lt;/path&gt;
    &lt;/pydev_pathproperty&gt;
    &lt;pydev_pathproperty name="org.python.pydev.PROJECT_EXTERNAL_SOURCE_PATH"&gt;
    &lt;path&gt;${_home}/build/dist&lt;/path&gt;
    &lt;/pydev_pathproperty&gt;
&lt;/pydev_project&gt;
	   </echo>

			<echo file=".classpath">
				<![CDATA[
              <?xml version="1.0" encoding="UTF-8"?>
				<classpath>
					<classpathentry kind="src" path="src/java"/>
					<classpathentry kind="src" path="test/java"/>
					<classpathentry kind="lib" path="lib/junit-3.8.2.jar"/>
					<classpathentry kind="lib" path="lib/jzlib-1.0.7.jar"/>
					<classpathentry kind="lib" path="lib/commons-io-1.4.jar"/>
					<classpathentry kind="lib" path="lib/slf4j-api-1.5.5.jar"/>
					<classpathentry kind="lib" path="lib/slf4j-jdk14-1.5.5.jar"/>
					<classpathentry kind="lib" path="]]></echo>
	    <echo file=".classpath" append="true">${jcc_egg}/jcc/classes</echo>
		<echo file=".classpath" append="true"><![CDATA["/>
					<classpathentry combineaccessrules="false" kind="src" path="/lucene_solr_3_1"/>
					<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>
					<classpathentry combineaccessrules="false" kind="src" path="/jetty-6.1.4"/>
					<classpathentry kind="output" path="bin"/>
				</classpath>
            ]]> </echo>


	</target>


	<!-- to setup dev environment -->
	<target name="eclipse" description="Sets up the dev project for Eclipse" depends="check-solr-location">
	    <subant target="ivy-bootstrap" inheritall="false" failonerror="true" buildpath="${solr.real.location}/..">
	      <fileset dir="${solr.real.location}/../lucene" includes="build.xml" />
	    </subant>
		
		<!-- this will set the project for lucene/ we'll just copy the files and modify them-->
		<subant target="eclipse" inheritall="false" failonerror="true" buildpath="${solr.real.location}/..">
	      <fileset dir="${solr.real.location}/.." includes="build.xml" />
	    </subant>
		
		<copy file="${solr.real.location}/../.project" tofile=".project" overwrite="false"/>
	    <copy file="${solr.real.location}/../.classpath" tofile=".classpath" overwrite="true"/>
	    <mkdir dir=".settings"/>
	    <copy todir=".settings/" overwrite="true">
	      <fileset dir="${solr.real.location}/../.settings" includes="*.prefs" />
	    </copy>
		
		
	</target>
	
	<target name="modify-eclipse" depends="check-solr-location">
		<copy file="${solr.real.location}/../.classpath" tofile=".classpath" overwrite="true"/>
		<!-- change path to point to the local solr checkout -->
		<property name="_before" value="${solr.real.location}"/>
		<property name="_up" location="${solr.real.location}/.."/>
		<property name="_root" location="."/>
		<script language="javascript">
			<![CDATA[
			var before = project.getProperty("_before");
			var r = project.getProperty("_root");
			var u = project.getProperty("_up");
			var m = before.substring(0, u.length()).substring(r.length()+1).replace("\\", "/") + "/";
			project.setProperty("solr.relative.location", m);
			]]>
		</script>
		
		<replace file=".classpath">
		  <replacefilter token="path=&quot;" value="path=&quot;${solr.relative.location}"/>
			<replacefilter token="output=&quot;" value="output=&quot;${solr.relative.location}"/>
			
		</replace>
		
		
	</target>
	
	<target name="ex" depends="check-solr-location">
		<ant target="example"
		            dir="${solr.real.location}"
		            inheritall="false" />
  </target>
	
	
	
	</project>
