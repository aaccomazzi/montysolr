<?xml version="1.0"?>

<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at
 
        http://www.apache.org/licenses/LICENSE-2.0
 
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
 -->

<project name="antlrqueryparser" default="default" >

	<description>
    ANTLR Flexible Query Parser
  </description>

	<import file="../contrib-build.xml"/>
	<property file="${common.dir}/contrib/antlrqueryparser/build.properties" prefix="dotprop"/>

	<!-- parameters for the build, many of these have default values -->
	<condition property="aqp.grammardir" value="./grammars">
        <not>
            <isset property="grammardir"/>
        </not>
  </condition>
  
  <property name="aqp.grammardir" value="${grammardir}"/>
	<property name="aqp.grammars.dir" location="${aqp.grammardir}" />
	<property name="aqp.parser.dir" location="src/java/org/apache/lucene/queryparser/flexible/aqp/parser" />
	<property name="aqp.classes.dir" location="${build.dir}/classes/java" />
	<property name="aqp.classes.parser.dir" location="${aqp.classes.dir}/org/apache/lucene/queryparser/flexible/aqp/parser" />
	<property name="aqp.dotfile" location="${build.dir}/graph.dot" />
	<property name="aqp.generate.py" location="${common.dir}/contrib/antlrqueryparser/src/python/generate_asts.py" />


	<condition property="aqp.grammar" value="StandardLuceneGrammar">
		<not>
			<isset property="grammar"/>
		</not>
	</condition>
	<property name="aqp.grammar" value="${grammar}"/>

	
	<condition property="aqp.rule" value="mainQ">
		<not>
			<isset property="rule"/>
		</not>
	</condition>
	<property name="aqp.rule" value="${rule}"/>


	<condition property="aqp.query" value="standard query">
		<not>
			<isset property="query"/>
		</not>
	</condition>
	<property name="aqp.query" value="${query}" />
	

	
	
	
	<mkdir dir="${build.dir}/classes/test"/>
	<path id="classpath">
		<path refid="base.classpath"/>
		<pathelement location="${build.dir}/classes/java"/>
		<fileset dir="${common.dir}/build/solr-download">
			<include name="**/antlr-runtime*.jar"/>
		</fileset>
		<fileset dir="${montysolr.dependencies.dir}">
			<include name="**/lucene-queryparser*.jar"/>
      <include name="**/lucene-sandbox*.jar"/>
    </fileset>
	</path>

  <path id="compile.classpath">
    <path refid="classpath"/>
  	<pathelement location="${build.dir}/classes/test" />
  	<fileset dir="${common.dir}/contrib/antlrqueryparser/lib">
        <include name="**/antlr*.jar"/>
  		  <include name="**/ST4*.jar"/>
  		  <include name="**/stringtemplate*.jar"/>
  		  <include name="**/gunit*.jar"/>
    </fileset>
  </path>
        	
	<path id="test.classpath">
		<path refid="test.base.classpath"/>
        <path refid="common.test.classpath"/>
		<path refid="classpath"/>
		<fileset dir="${common.dir}/contrib/antlrqueryparser/lib">
			<include name="**/antlr-runtime*.jar"/>
		</fileset>
	</path>

	<path id="additional.classpath" />



	<target name="clean">
		<delete dir="${build.dir}" />
		<clean-parser grammar-name="${aqp.grammar}" parser-dir="${aqp.parser.dir}"/>
	</target>

	<target name="compile-core" depends="generate-antlr,compile"/>

	
	<target name="generate-antlr" depends="antlr-generate" 
		description="Regenerates grammar; usage -Dgrammar=&lt;name&gt;"/>

	
	<target name="antlr-generate" depends="resolve">
		<generate-grammar grammar-name="${aqp.grammar}"
			 grammar-dir="${aqp.grammars.dir}"
			 parser-dir="${aqp.parser.dir}"
			 build-dir="${aqp.classes.dir}"
			 classpathref="compile.classpath"
			   />
	</target>


	<!-- compiles both grammar and the test classes -->
	<target name="compile-all" depends="compile,compile-ast" />
		
    
	<target name="compile-ast">
		<mkdir dir="${build.dir}/classes/test"/>
    <compile srcdir="${common.dir}/contrib/antlrqueryparser/src/test" 
        destdir="${build.dir}/classes/test">
        <classpath refid="compile.classpath"/>
        <include name="**/BuildAST.java"/>
    </compile>
	</target>
	
	<target name="compile" description="Compiles all the java classes" depends="generate-antlr">
		<compile srcdir="src/java" 
			destdir="${build.dir}/classes/java">
        <classpath refid="compile.classpath"/>
	      <include name="**/*.java"/>
        <compilerarg line="-Xlint:-deprecation" />
    </compile>
	</target>
	
  <target name="compile-prerequisites" depends="">
      
      <!-- we are using some classes from the parser test framework
           so we must compile them ourselves (not to depend on luck)
           
           But we'll put them into test so that it is not included
           inside generated jars
      --> 
      <compile srcdir="${prop.solr.home}/lucene/queryparser/src/test" 
          destdir="${build.dir}/classes/test">
          <classpath refid="test.classpath"/>
          <classpath refid="additional.classpath"/>
          <include name="**/flexible/standard/**.java"/>
      </compile>
      
  </target>


	<target name="dot" depends="">
		<generate-dot grammar-name="${aqp.grammar}"
		            query="${aqp.query}"
		            rule="${aqp.rule}"
		            classpathref="compile.classpath"
			        output-file="${aqp.dotfile}"
		        />
	</target>

	
	<target name="tree" depends="">
		<generate-tree grammar-name="${aqp.grammar}"
			query="${aqp.query}"
			rule="${aqp.rule}"
			classpathref="compile.classpath"/>
	</target>

	
	<target name="display" depends="dot" >
		<echo>${dotprop.dot_viewer} ${aqp.dotfile}</echo>
		<exec executable="${dotprop.dot_viewer}" failifexecutionfails="true">
			<arg line="${aqp.dotfile}"/>
		</exec>
	</target>

	
	<target name="view" description="Test the string, usage: ant -Dquery=string" depends="dot,tree,display">
	</target>

	<target name="try-dot" description="Like view, but regenerates the grammar first" depends="compile-all,dot" />
	<target name="try-tree" description="Like view, but regenerates the grammar first" depends="compile-all,tree" />
	<target name="try-view" description="Like view, but regenerates the grammar first" depends="compile-all,view" />

	<target name="gunit" description="Run the gunit test suite, usage: ant -Dgrammar=name" 
		depends="generate-antlr">
		 
		<run-gunit grammar-name="${aqp.grammar}" 
			grammar-dir="${aqp.grammars.dir}" 
			classpathref="compile.classpath"/>

	</target>

	
  <target name="test" depends="default,compile-all" >
      <antcall target="common.test" inheritRefs="true"/>
  </target>

	
	<target name="generate-html" description="Generates a html page for the grammar X (from X.gunit file)" 
		depends="compile-all,generate-antlr" >
	    
		<echo>
		      Generating graphs for the grammar ${aqp.grammar}
			    Note: the ${dotprop.svg_generator} must exist and be executable
			    You can fix the path in ${common.dir}/contrib/antlrqueryparser/build.properties
		</echo>
		<generate-html python-executable="${dotprop.python}"
			  python-generator="${aqp.generate.py}"
			  grammar-name="${aqp.grammar}"
			  build-dir="${build.dir}"
			  classpath="${toString:compile.classpath}"
			  grammar-dir="${aqp.grammars.dir}"
			  java-executable="${dotprop.java_executable}"
			  dot-executable="${dotprop.svg_generator}"
			  />
	</target>

	<target name="build-all"  depends="clean,default,compile-all,jar" />
	
	

	<!--
	============================================================================================
	                                           MACROS
  ============================================================================================
	//-->
    
	<import file="macros.xml" />

</project>
